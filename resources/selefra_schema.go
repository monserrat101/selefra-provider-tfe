// Code generated by https://github.com/selefra/selefra-terraform-provider-scaffolding DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***
package resources


import (
	"context"
	"github.com/selefra/selefra-provider-sdk/provider/schema"
	"github.com/selefra/selefra-provider-sdk/table_schema_generator"
    "github.com/selefra/selefra-provider-sdk/terraform/bridge"
    "github.com/selefra/selefra-provider-sdk/terraform/column_value_extractor" 
)




// tfe_notification_configuration
func TableSchemaGenerator_tfe_notification_configuration() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_notification_configuration().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_notification_configuration()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_notification_configuration
func GetColumns_tfe_notification_configuration() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("email_addresses").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email_user_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("triggers").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("destination_type").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_organization
func TableSchemaGenerator_tfe_organization() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_organization().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_organization()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_organization
func GetColumns_tfe_organization() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("session_timeout_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("allow_force_delete_workspaces").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("assessments_enforced").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("owners_team_saml_role_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("session_remember_minutes").ColumnType(schema.ColumnTypeFloat).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("collaborator_auth_policy").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("cost_estimation_enabled").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("default_project_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("send_passing_statuses_for_untriggered_speculative_plans").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_project
func TableSchemaGenerator_tfe_project() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_project().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_project()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_project
func GetColumns_tfe_project() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_organization_membership
func TableSchemaGenerator_tfe_organization_membership() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_organization_membership().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_organization_membership()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_organization_membership
func GetColumns_tfe_organization_membership() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("user_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("email").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_policy
func TableSchemaGenerator_tfe_policy() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_policy().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_policy()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_policy
func GetColumns_tfe_policy() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Description("Text describing the policy's purpose").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("enforce_mode").ColumnType(schema.ColumnTypeString).Description("The enforcement configuration of the policy. For Sentinel, valid values are `hard-mandatory`, `soft-mandatory` and `advisory`. For OPA, Valid values are ``mandatory` and `advisory``").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Description("The policy-as-code framework for the policy. Valid values are sentinel and opa").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Description("The name of the policy").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization").ColumnType(schema.ColumnTypeString).Description("Name of the organization that this policy belongs to").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy").ColumnType(schema.ColumnTypeString).Description("Text of a valid Sentinel or OPA policy").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("query").ColumnType(schema.ColumnTypeString).Description("The OPA query to run. Required for OPA policies").Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_workspace_policy_set
func TableSchemaGenerator_tfe_workspace_policy_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_workspace_policy_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_workspace_policy_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_workspace_policy_set
func GetColumns_tfe_workspace_policy_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_variable_set
func TableSchemaGenerator_tfe_variable_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_variable_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_variable_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_variable_set
func GetColumns_tfe_variable_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("global").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_run_trigger
func TableSchemaGenerator_tfe_run_trigger() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_run_trigger().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_run_trigger()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_run_trigger
func GetColumns_tfe_run_trigger() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("sourceable_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_team_token
func TableSchemaGenerator_tfe_team_token() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_team_token().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_team_token()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_team_token
func GetColumns_tfe_team_token() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("force_regenerate").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("team_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_oauth_client
func TableSchemaGenerator_tfe_oauth_client() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_oauth_client().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_oauth_client()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_oauth_client
func GetColumns_tfe_oauth_client() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("oauth_token_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("private_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("rsa_public_key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("secret").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("service_provider").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("api_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("http_url").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("oauth_token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_team_organization_member
func TableSchemaGenerator_tfe_team_organization_member() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_team_organization_member().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_team_organization_member()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_team_organization_member
func GetColumns_tfe_team_organization_member() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization_membership_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("team_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_policy_set
func TableSchemaGenerator_tfe_policy_set() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_policy_set().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_policy_set()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_policy_set
func GetColumns_tfe_policy_set() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("policies_path").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("slug").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("description").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("global").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("overridable").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("workspace_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("vcs_repo").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("kind").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("name").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_policy_set_parameter
func TableSchemaGenerator_tfe_policy_set_parameter() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_policy_set_parameter().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_policy_set_parameter()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_policy_set_parameter
func GetColumns_tfe_policy_set_parameter() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("sensitive").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("value").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("key").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("policy_set_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_team_project_access
func TableSchemaGenerator_tfe_team_project_access() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_team_project_access().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_team_project_access()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_team_project_access
func GetColumns_tfe_team_project_access() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("project_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("team_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("access").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_organization_token
func TableSchemaGenerator_tfe_organization_token() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_organization_token().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_organization_token()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_organization_token
func GetColumns_tfe_organization_token() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("token").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("force_regenerate").ColumnType(schema.ColumnTypeBool).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_team_member
func TableSchemaGenerator_tfe_team_member() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_team_member().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_team_member()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_team_member
func GetColumns_tfe_team_member() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("team_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("username").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}



// tfe_team_organization_members
func TableSchemaGenerator_tfe_team_organization_members() (*schema.Table, *schema.Diagnostics) {
    diagnostics := schema.NewDiagnostics()

    table, d := GetResource_tfe_team_organization_members().ToTable(func(ctx context.Context, clientMeta *schema.ClientMeta, taskClient any, task *schema.DataSourcePullTask) *bridge.TerraformBridge {
        return taskClient.(*Client).TerraformBridge
    })
    if diagnostics.AddDiagnostics(d).HasError() {
        return nil, diagnostics
    }

    table.Columns = GetColumns_tfe_team_organization_members()
    if len(table.Columns) == 0 {
        return nil, diagnostics.AddErrorMsg("")
    }

    return table, diagnostics
}

// tfe_team_organization_members
func GetColumns_tfe_team_organization_members() []*schema.Column {
    return []*schema.Column{ 
        table_schema_generator.NewColumnBuilder().ColumnName("id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("organization_membership_ids").ColumnType(schema.ColumnTypeJSON).
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("team_id").ColumnType(schema.ColumnTypeString).Build(), 
        table_schema_generator.NewColumnBuilder().ColumnName("selefra_terraform_original_result").ColumnType(schema.ColumnTypeJSON).Description("save terraform original result for compatibility").
        Extractor(column_value_extractor.TerraformRawDataColumnValueExtractor()).Build(), 
    }
}


